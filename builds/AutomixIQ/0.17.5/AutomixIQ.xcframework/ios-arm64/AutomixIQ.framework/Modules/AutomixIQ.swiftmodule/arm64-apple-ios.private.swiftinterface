// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AutomixIQ
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
@_exported import AutomixIQ
import CoreData
import Foundation
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.lock
import os
@_inheritsConvenienceInitializers @objc public class AutomixIQ : ObjectiveC.NSObject {
  @objc public static func automixIQError(code: AutomixIQ.ErrorCode) -> Foundation.NSError
  @objc public static func errorDescription(code: AutomixIQ.ErrorCode) -> Swift.String?
  @objc public static func initialised() -> Swift.Bool
  @objc public static func initialise(config: AutomixIQ.AutomixIQConfig, tunedRestDelegate: any AutomixIQ.TunedRestDelegate, automixIQStatusDelegate: (any AutomixIQ.AutomixIQStatusObserverDelegate)?, musicCacheDelegate: (any AutomixIQ.AutomixIQMusicCacheDelegate)? = nil, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public static func initialise(config: AutomixIQ.AutomixIQConfig, automixIQStreamingDelegate: any AutomixIQ.AutomixIQStreamingDelegate, automixIQStatusDelegate: (any AutomixIQ.AutomixIQStatusObserverDelegate)?, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public static func internetAvailable() -> Swift.Bool
  @objc public func terminate()
  @objc public static let instance: AutomixIQ.AutomixIQ
  @objc public func forceRefreshCredentials(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func clearCache(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setMusicCacheDelegate(_ musicCacheDelegate: any AutomixIQ.AutomixIQMusicCacheDelegate)
  @objc public func addStatusObserverDelegate(_ statusObserverDelegate: any AutomixIQ.AutomixIQStatusObserverDelegate)
  @objc public func removeStatusObserverDelegate(_ statusObserverDelegate: any AutomixIQ.AutomixIQStatusObserverDelegate)
  @objc public func automixOn(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func automixOn(identifiers: [Swift.String], metadata: [AutomixIQ.TunedTrackModel]?, playTrackIndex: Swift.Int32, seconds: Swift.Float, autoplay: Swift.Bool, contextType: Swift.String?, contextId: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func automixOff(completion: ((_ error: (any Swift.Error)?, _ status: AutomixIQ.AutomixIQStatus) -> Swift.Void)?)
  @objc public func resetPlaylistToEmpty(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func loadTracks(identifiers: [Swift.String], metadata: [AutomixIQ.TunedTrackModel]?, playTrackIndex: Swift.Int32, seconds: Swift.Float, autoplay: Swift.Bool, contextType: Swift.String?, contextId: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func addTracks(identifiers: [Swift.String], metadata: [AutomixIQ.TunedTrackModel]?, contextType: Swift.String?, contextId: Swift.Int32, index: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func addTrack(identifier: Swift.String, metadata: AutomixIQ.TunedTrackModel?, contextType: Swift.String?, contextId: Swift.Int32, index: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func removeTrack(at index: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func moveTrack(at index: Swift.Int32, toIndex: Swift.Int32, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func play(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func pause(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func next(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func previous(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func back(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @available(*, deprecated, message: "Toggles are evil, please use setReplay(on:completion:)")
  @objc public func toggleReplay(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setReplay(on: Swift.Bool, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func seekTo(seconds: Swift.Float, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func skipToTrackAtIndex(_ index: Swift.Int, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setFilterExplicit(filterExplicit: Swift.Bool, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func reorderTracks(newOrder: [Swift.String], completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func playTrackUntilEndThenPause(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setAutomixPlaySpeed(_ playSpeed: Swift.Float, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setAutomixVolumeNormalised(_ volumeNormalised: Swift.Float, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @available(*, deprecated, message: "Toggles are evil, please use setMute(on:completion:)")
  @objc public func toggleMute(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setMute(on: Swift.Bool, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setPreferredTransitionDurationSeconds(_ duration: Swift.Float, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func loopPlayingTrack(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func stopLoopingPlayingTrack(completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func setVinylStartStopEnabled(_ enabled: Swift.Bool, completion: ((_ error: (any Swift.Error)?) -> Swift.Void)?)
  @objc public func on() -> Swift.Bool
  @objc public func setWaveformPointsPerTrack(_ waveformPointsPerTrack: Swift.Int32)
  @objc public func waveformDataForTrack(identifier: Swift.String, applyTransitions: Swift.Bool) -> AutomixIQ.AutomixIQWaveformModel?
  @objc public func waveformDataForTrack(identifier: Swift.String, applyEnterTransition: Swift.Bool, applyExitTransition: Swift.Bool) -> AutomixIQ.AutomixIQWaveformModel?
  @objc public func placeholderWaveformDataForTrack(identifier: Swift.String) -> AutomixIQ.AutomixIQWaveformModel?
  @objc public func automixStatus() -> AutomixIQ.AutomixIQStatus?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum _HMACAlgorithm : Swift.Int {
  case MD5, SHA1, SHA224, SHA256, SHA384, SHA512
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TunedLogLevel : Swift.Int {
  case logLevelTrace = 0
  case logLevelDebug
  case logLevelInfo
  case logLevelWarning
  case logLevelError
  case logLevelFatal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class TunedArtistModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var Name: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class TunedPluginMetadataModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var `Type`: Swift.String?
  @objc public var Meta: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class TunedTrackModel : ObjectiveC.NSObject, Swift.Codable {
  public var TrackId: Swift.Int
  @objc public var Artists: [AutomixIQ.TunedArtistModel]?
  @objc public var Name: Swift.String?
  public var Duration: Swift.Int?
  public var IsExplicit: Swift.Bool?
  public var TrackNumber: Swift.Int?
  @objc public var ReleaseName: Swift.String?
  @objc public var trackIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @objc public var trackNumber: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var duration: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var key: Swift.String? {
    @objc get
  }
  @objc public var isExplicit: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var bpm: Swift.Double {
    @objc get
  }
  @objc public var Image: Swift.String?
  @objc public init(trackId: Swift.String, artistName: Swift.String, name: Swift.String, duration: Swift.Int, isExplicit: Swift.Bool, trackNumber: Swift.Int, releaseName: Swift.String, key: Swift.String?, tempo: Swift.Float, image: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class TunedAuthenticationResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var access_token: Swift.String?
  @objc public var token_type: Swift.String?
  public var expires_in: Swift.Int?
  @objc public var refresh_token: Swift.String?
  @objc public var tuned_user_id: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol TunedRestDelegate : ObjectiveC.NSObjectProtocol {
  @objc func tunedRestTokenExpired(deviceIdentifierForVendor: Swift.String, countryCode: Swift.String, tunedUserId: Swift.String?, oldAccessToken: Swift.String?, refreshToken: Swift.String?, tokenType: Swift.String?, completion: @escaping (_ error: (any Swift.Error)?, _ credentials: AutomixIQ.TunedAuthenticationResponse?, _ tunedUserId: Swift.String?) -> Swift.Void)
  @objc optional func asyncGetAuthenticatedDevice(deviceIdentifierForVendor: Swift.String, completion: @escaping (_ error: (any Swift.Error)?, _ tunedDeviceId: Swift.String?) -> Swift.Void)
  @objc func uniqueDeviceIdentifier() -> Swift.String
  @objc func automaticallyLogPlayback() -> Swift.Bool
  @objc optional func logAutomixIQMessage(logLevel: AutomixIQ.TunedLogLevel, message: Swift.String)
}
@objc public enum AutomixIQPlaybackEventType : Swift.Int {
  case trackPlayStart = 0
  case trackPlayPlayed5Secs
  case trackPlayHeartbeat30Secs
  case trackPlayStartMixingIntoNext
  case trackPlaySkipped
  case trackPlayFinished
  case mixPlaybackEnded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ErrorCode : Swift.Int {
  case sdkAlreadyInitialised = 1001
  case sdkInitialisationUnauthorised
  case noInternetAvailable
  case noInternetAvailableTooLongOffline
  case offlineNoTunedUserIdAvailable
  case notMainThread
  case sdkNotInitialised
  case sdkNotInitialisedVersionNoLongerSupported
  case sdkNotOn
  case sdkAlreadyOn
  case loadTracksEmptyPlaylist
  case loadTracksOutOfBounds
  case addTrackPlaylistDoesNotExist
  case addTrackOutOfBounds
  case addTrackNoMetadata
  case addTrackInternalError
  case removeTrackOutOfBounds
  case playAlreadyPlaying
  case pauseAlreadyPaused
  case nextNoTrackAvailable
  case previousNoTrackAvailable
  case backNoTrackAvailable
  case seekNoTrackAvailable
  case seekNoCurrentTrack
  case reorderMissingTrack
  case playToEndMissingTrack
  case playToEndMixEnd
  case moveTrackOutOfBounds
  case startLoopingNoLoopingTrack
  case stopLoopingNoLoopingTrack
  case unable_to_load_mix
  case unimplemented
  case cancelled
  case onAlreadyTurningOn
  case onWhileTurningOff
  case offAlreadyTurningOff
  case offWhileTurningOn
  case cannotCreateChannelLayout
  case cannotCreateInputBuffer
  case cannotSetupAVAudioSession
  case cannotStartAudioEngine
  case cannotRestoreAudioSession
  case failedToStop
  case cannotLoadExplicitLyricsTrack
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func sdkError(code: AutomixIQ.ErrorCode) -> any Swift.Error
@objc public enum AutomixIQStatusVariable : Swift.Int {
  case playing
  case mixing
  case playingTrackIdentifier
  case playingTrackIndex
  case playingTrackCurrentTime
  case playingTrackTotalTime
  case playingTrackStreamingProgress
  case replayOn
  case canSkipToPrevious
  case canBack
  case canSkipToNext
  case canPlayPause
  case canSeek
  case canReorderTracks
  case readyToPlay
  case canMixNow
  case playlist
  case muted
  case playSpeed
  case normalisedVolume
  case preferredTransitionDurationSeconds
  case requestedLoopTrackIdentifier
  case requestedPauseTrackIdentifier
  case vinylStartStop
  case nextTransitionDuration
  case transitionStartTimeSeconds
  case failedTrackLoadIdentifiers
  case canOnOff
  case playingTrackOriginalSessionId
  case explicitLyricsFiltering
  case mixId
  case playlistDiff
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AutomixIQStatus : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var playing: Swift.Bool
  @objc public var mixing: Swift.Bool
  @objc public var playingTrackIdentifier: Swift.String?
  @objc public var playingTrackIndex: Swift.Int
  @objc public var playingTrackCurrentTime: Foundation.TimeInterval
  @objc public var playingTrackTotalTime: Foundation.TimeInterval
  @objc public var playingTrackStreamingProgress: Swift.Float
  @objc public var replayOn: Swift.Bool
  @objc public var canSkipToPrevious: Swift.Bool
  @objc public var canBack: Swift.Bool
  @objc public var canSkipToNext: Swift.Bool
  @objc public var canPlayPause: Swift.Bool
  @objc public var canSeek: Swift.Bool
  @objc public var canReorderTracks: Swift.Bool
  @objc public var readyToPlay: Swift.Bool
  @objc public var canMixNow: Swift.Bool
  @objc public var playlist: [Swift.String]
  @objc public var muted: Swift.Bool
  @objc public var playSpeed: Swift.Float
  @objc public var normalisedVolume: Swift.Float
  @objc public var preferredTransitionDurationSeconds: Swift.Float
  @objc public var requestedLoopTrackIdentifier: Swift.String?
  @objc public var requestedPauseTrackIdentifier: Swift.String?
  @objc public var vinylStartStop: Swift.Bool
  @objc public var nextTransitionDuration: Swift.Float
  @objc public var transitionStartTimeSeconds: Swift.Float
  @objc public var failedTrackLoadIdentifiers: [Swift.String]?
  @objc public var canOnOff: Swift.Bool
  @objc public var playingTrackOriginalSessionId: Swift.String?
  @objc public var explicitLyricsFiltering: Swift.Bool
  @objc public var mixId: Swift.Int64
  @objc public var playlistDiff: [Swift.String : [AutomixIQ.AutomixIQPlaylistOperation]]?
  @objc override dynamic public init()
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public static func automixIQStatusVariableName(_ variable: AutomixIQ.AutomixIQStatusVariable) -> Swift.String
  @objc public func variableValue(_ variable: AutomixIQ.AutomixIQStatusVariable) -> Any
  @objc public static func allStatusVariables() -> [Foundation.NSNumber]
  @objc deinit
}
@objc public class AutomixIQConfig : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, country: Swift.String, storeId: Swift.String, applicationId: Swift.String)
  @objc public var apiKey: Swift.String
  @objc public var country: Swift.String
  @objc public var storeId: Swift.String
  @objc public var applicationId: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AutomixIQWaveformModel : ObjectiveC.NSObject {
  @objc public var xAxis: [Foundation.NSNumber]?
  @objc public var yAxis: [Foundation.NSNumber]?
  @objc public var leftTransitionStartIndex: Swift.Int
  @objc public var leftTransitionEndIndex: Swift.Int
  @objc public var rightTransitionStartIndex: Swift.Int
  @objc public var rightTransitionEndIndex: Swift.Int
  @objc public var indicesPerSecond: Swift.Float
  @objc public var leftTransitionStartTime: Swift.Float
  @objc public var leftTransitionEndTime: Swift.Float
  @objc public var leftTransitionDuration: Swift.Float
  @objc public var rightTransitionStartTime: Swift.Float
  @objc public var rightTransitionEndTime: Swift.Float
  @objc public var rightTransitionDuration: Swift.Float
  @objc public var trackDurationSeconds: Swift.Float
  @objc public var placeholder: Swift.Bool
  @objc public var nextTrack0SecondsAnchorTime: Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum AutomixIQPlaylistOperationType : Swift.Int {
  case Added = 0
  case Removed
  case Moved
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AutomixIQPlaylistOperation : ObjectiveC.NSObject {
  @objc public var type: AutomixIQ.AutomixIQPlaylistOperationType
  @objc public var fromIndex: Swift.Int
  @objc public var toIndex: Swift.Int
  @objc public var trackIdentifier: Swift.String?
  @objc public var trackInstance: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AutomixIQStreamingDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func logAutomixIQMessage(logLevel: AutomixIQ.TunedLogLevel, message: Swift.String)
  @objc func isLoggedIn() -> Swift.Bool
  @objc func asyncCheckDeviceStatus(completion: @escaping (_ error: (any Swift.Error)?, _ canContinuePlaying: Swift.Bool) -> Swift.Void)
  @objc func getDeviceIdentifier() -> Swift.String?
  @objc func asyncGetStream(streamingDeviceId: Swift.String, sessionId: Swift.String, trackId: Swift.String, completion: @escaping (_ error: (any Swift.Error)?, _ url: Swift.String?, _ newSessionId: Swift.String?) -> Swift.Void)
  @objc func asyncGetTrackMetadata(trackId: Swift.String, completion: @escaping (_ error: (any Swift.Error)?, _ track: AutomixIQ.TunedTrackModel?) -> Swift.Void)
  @objc func asyncLogPlayEvent(trackId: Swift.String, seconds: Swift.Int, guid: Swift.String, logPlayType: Swift.String, source: Swift.String?, sourceId: Swift.Int, completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc func trackDownloadCompleted(trackId: Swift.String, data: Foundation.NSData)
  @objc func trackDownloadProgressChanged(trackId: Swift.String, progress: Swift.Float)
  @objc func syncGetCachedTrack(trackId: Swift.String) -> Foundation.Data?
  @objc func syncGetTrackMetadata(trackId: Swift.String?) -> AutomixIQ.TunedTrackModel?
  @objc func cacheMetadata(_ metadata: [AutomixIQ.TunedTrackModel])
}
@objc public protocol AutomixIQStatusObserverDelegate : ObjectiveC.NSObjectProtocol {
  @objc func statusChanged(variables: [Foundation.NSNumber], status: AutomixIQ.AutomixIQStatus)
  @objc optional func playbackEvent(type: AutomixIQ.AutomixIQPlaybackEventType, identifier: Swift.String?, originalSessionId: Swift.String?, status: AutomixIQ.AutomixIQStatus?)
  @objc optional func waveformDataAvailable(identifier: Swift.String)
}
@objc public protocol AutomixIQMusicCacheDelegate : ObjectiveC.NSObjectProtocol {
  @objc func trackDownloadCompleted(trackId: Swift.String, data: Foundation.Data)
  @objc func trackDownloadProgressChanged(trackId: Swift.String, progress: Swift.Float)
  @objc func getCachedTrack(trackId: Swift.String) -> Foundation.Data?
  @objc func getTrackMetadata(trackId: Swift.String?) -> AutomixIQ.TunedTrackModel?
}
public func __duff_trace(_ condition: Swift.Int, _ message: @autoclosure () -> Swift.String)
public func __duff_debug(_ message: @autoclosure () -> Swift.String)
public func __duff_info(_ message: Swift.String)
public func __duff_warn(_ message: Swift.String)
public func __duff_error(_ message: Swift.String)
public func __duff_fatal(_ message: Swift.String)
public func __duff_assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), file: Swift.StaticString = #file, line: Swift.UInt = #line)
public func __duff_assert_false(_ message: @autoclosure () -> Swift.String = String(), file: Swift.StaticString = #file, line: Swift.UInt = #line)
public func __duff_exception_message(_ message: Swift.String = String())
extension Swift.String {
  public var a: Swift.String {
    get
  }
  public var b: Swift.String {
    get
  }
  public var c: Swift.String {
    get
  }
  public var d: Swift.String {
    get
  }
  public var e: Swift.String {
    get
  }
  public var f: Swift.String {
    get
  }
  public var g: Swift.String {
    get
  }
  public var h: Swift.String {
    get
  }
  public var i: Swift.String {
    get
  }
  public var j: Swift.String {
    get
  }
  public var k: Swift.String {
    get
  }
  public var l: Swift.String {
    get
  }
  public var m: Swift.String {
    get
  }
  public var n: Swift.String {
    get
  }
  public var o: Swift.String {
    get
  }
  public var p: Swift.String {
    get
  }
  public var q: Swift.String {
    get
  }
  public var r: Swift.String {
    get
  }
  public var s: Swift.String {
    get
  }
  public var t: Swift.String {
    get
  }
  public var u: Swift.String {
    get
  }
  public var v: Swift.String {
    get
  }
  public var w: Swift.String {
    get
  }
  public var x: Swift.String {
    get
  }
  public var y: Swift.String {
    get
  }
  public var z: Swift.String {
    get
  }
}
extension Swift.String {
  public var A: Swift.String {
    get
  }
  public var B: Swift.String {
    get
  }
  public var C: Swift.String {
    get
  }
  public var D: Swift.String {
    get
  }
  public var E: Swift.String {
    get
  }
  public var F: Swift.String {
    get
  }
  public var G: Swift.String {
    get
  }
  public var H: Swift.String {
    get
  }
  public var I: Swift.String {
    get
  }
  public var J: Swift.String {
    get
  }
  public var K: Swift.String {
    get
  }
  public var L: Swift.String {
    get
  }
  public var M: Swift.String {
    get
  }
  public var N: Swift.String {
    get
  }
  public var O: Swift.String {
    get
  }
  public var P: Swift.String {
    get
  }
  public var Q: Swift.String {
    get
  }
  public var R: Swift.String {
    get
  }
  public var S: Swift.String {
    get
  }
  public var T: Swift.String {
    get
  }
  public var U: Swift.String {
    get
  }
  public var V: Swift.String {
    get
  }
  public var W: Swift.String {
    get
  }
  public var X: Swift.String {
    get
  }
  public var Y: Swift.String {
    get
  }
  public var Z: Swift.String {
    get
  }
}
extension Swift.String {
  public var _1: Swift.String {
    get
  }
  public var _2: Swift.String {
    get
  }
  public var _3: Swift.String {
    get
  }
  public var _4: Swift.String {
    get
  }
  public var _5: Swift.String {
    get
  }
  public var _6: Swift.String {
    get
  }
  public var _7: Swift.String {
    get
  }
  public var _8: Swift.String {
    get
  }
  public var _9: Swift.String {
    get
  }
  public var _0: Swift.String {
    get
  }
}
extension Swift.String {
  public var space: Swift.String {
    get
  }
  public var point: Swift.String {
    get
  }
  public var dash: Swift.String {
    get
  }
  public var comma: Swift.String {
    get
  }
  public var semicolon: Swift.String {
    get
  }
  public var colon: Swift.String {
    get
  }
  public var apostrophe: Swift.String {
    get
  }
  public var quotation: Swift.String {
    get
  }
  public var plus: Swift.String {
    get
  }
  public var equals: Swift.String {
    get
  }
  public var paren_left: Swift.String {
    get
  }
  public var paren_right: Swift.String {
    get
  }
  public var asterisk: Swift.String {
    get
  }
  public var ampersand: Swift.String {
    get
  }
  public var caret: Swift.String {
    get
  }
  public var percent: Swift.String {
    get
  }
  public var dollar: Swift.String {
    get
  }
  public var pound: Swift.String {
    get
  }
  public var at: Swift.String {
    get
  }
  public var exclamation: Swift.String {
    get
  }
  public var question_mark: Swift.String {
    get
  }
  public var back_slash: Swift.String {
    get
  }
  public var forward_slash: Swift.String {
    get
  }
  public var curly_left: Swift.String {
    get
  }
  public var curly_right: Swift.String {
    get
  }
  public var bracket_left: Swift.String {
    get
  }
  public var bracket_right: Swift.String {
    get
  }
  public var bar: Swift.String {
    get
  }
  public var less_than: Swift.String {
    get
  }
  public var greater_than: Swift.String {
    get
  }
  public var underscore: Swift.String {
    get
  }
}
extension Swift.String {
  public var dot: Swift.String {
    get
  }
}
extension AutomixIQ._HMACAlgorithm : Swift.Equatable {}
extension AutomixIQ._HMACAlgorithm : Swift.Hashable {}
extension AutomixIQ._HMACAlgorithm : Swift.RawRepresentable {}
extension AutomixIQ.TunedLogLevel : Swift.Equatable {}
extension AutomixIQ.TunedLogLevel : Swift.Hashable {}
extension AutomixIQ.TunedLogLevel : Swift.RawRepresentable {}
extension AutomixIQ.AutomixIQPlaybackEventType : Swift.Equatable {}
extension AutomixIQ.AutomixIQPlaybackEventType : Swift.Hashable {}
extension AutomixIQ.AutomixIQPlaybackEventType : Swift.RawRepresentable {}
extension AutomixIQ.ErrorCode : Swift.Equatable {}
extension AutomixIQ.ErrorCode : Swift.Hashable {}
extension AutomixIQ.ErrorCode : Swift.RawRepresentable {}
extension AutomixIQ.AutomixIQStatusVariable : Swift.Equatable {}
extension AutomixIQ.AutomixIQStatusVariable : Swift.Hashable {}
extension AutomixIQ.AutomixIQStatusVariable : Swift.RawRepresentable {}
extension AutomixIQ.AutomixIQPlaylistOperationType : Swift.Equatable {}
extension AutomixIQ.AutomixIQPlaylistOperationType : Swift.Hashable {}
extension AutomixIQ.AutomixIQPlaylistOperationType : Swift.RawRepresentable {}
